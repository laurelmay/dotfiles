#!/usr/bin/env zsh

# The commands in this file largely either source various files or output of commands, add
# directories to PATH if they exist, or modify similar values.
#
# Note to self: It is very easy to try to use $path as a variable name in this file; however,
# in ZSH (and other shells), that is just $PATH as an array instead of colon-delimited. So try
# to be careful of that.

function () {
  # Files to source directly if they exist
  local to_source=( \
    "$HOME/.cargo/env" \
    "$HOME/.ghcup/env" \
    "$HOME/.bun/_bun" \
  )

  for file in "$to_source[@]"; do
    if [ -f "$file" ]; then
      source "$file"
    fi
  done

  # Directories to add to the path if they exist
  local path_dirs=( \
    "$HOME/go/bin" \
    "$HOME/.poetry/bin" \
    "$HOME/.bun/bin" \
  )

  for dir in "$path_dirs[@]"; do
    if [ -d "$dir" ]; then
      path+=("$dir")
    fi
  done

  # If a system-provided rustup is used, `~/.cargo/env` may not exist to
  # source; however, tools may still get installed to `~/.cargo/bin/` when
  # using `cargo install`.
  if [[ (! -f "$$HOME/.cargo/env") && -d "$HOME/.cargo/bin" ]]; then
    path+=("$HOME/.cargo/bin")
  fi

  # The location for homebrew is different on macOS and Linux; however, in both scenarios, a
  # the `shellenv` command should be `eval`-ed to set the necessary environment variables
  # correctly.
  local homebrew_paths=(\
    "/home/linuxbrew/.linuxbrew" \
    "/opt/homebrew" \
  )
  local homebrew_loaded=0
  for brew_path in "$homebrew_paths[@]"; do
    if [ -d "$brew_path" ] && [ "$homebrew_loaded" -ne 1 ]; then
      eval "$("$brew_path/bin/brew" shellenv)"
      fpath+=("$(brew --prefix)/share/zsh/site-functions")
      homebrew_loaded=1
    fi
  done
}

function load_ruby() {
  # Ruby Gems
  if which ruby &> /dev/null; then
    export GEM_HOME="$(ruby -e "puts Gem.user_dir")"
    path=("$(ruby -e 'puts Gem.user_dir')/bin" $path)
  fi
}
